/* Copyright 2016 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package com.google.testing.web;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.io.Files;
import com.google.testing.util.Bazel;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.json.JSONException;
import org.json.JSONObject;
/*
 * Represents the metadata for the web test browser as generated by the web test macro. Use {@link
 * #getInstance()} to retrieve the singleton.
 */
public class Metadata {
  private static Optional<Metadata> instance;

  private final String formFactor;
  private final String browserName;
  private final String environment;
  private final String browserLabel;
  private final JSONObject capabilities;

  @VisibleForTesting
  Metadata(String metadata) {
    try {
      File file = Bazel.getInstance().runfile(metadata).toFile();
      String source = Files.toString(file, StandardCharsets.UTF_8);
      JSONObject json = new JSONObject(source);
      this.formFactor = json.getString("formFactor");
      this.browserName = json.getString("browserName");
      this.environment = json.getString("environment");
      this.browserLabel = json.getString("browserLabel");
      this.capabilities = json.getJSONObject("capabilities");
    } catch (IOException | JSONException e) {
      throw new RuntimeException(e);
    }
  }

  public String getFormFactor() {
    return formFactor;
  }

  public String getBrowserName() {
    return browserName;
  }

  public String getEnvironment() {
    return environment;
  }

  public String getBrowserLabel() {
    return browserLabel;
  }

  /** Returns the default capabilities for the current browser. */
  public JSONObject getCapabilities() {
    return this.capabilities;
  }

  /** Returns the metadata for the web test if defined. */
  public static Optional<Metadata> getInstance() {
    synchronized (Metadata.class) {
      if (instance == null) {
        try {
          instance = Optional.of(new Metadata(System.getenv("WEB_TEST_BROWSER_METADATA")));
        } catch (Throwable t) {
          instance = Optional.empty();
        }
      }

      return instance;
    }
  }
}
